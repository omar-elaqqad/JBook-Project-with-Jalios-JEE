<%--
  @Summary: Member CSV import : global groups List
  @since: jcms-10.0.5 / JCMS-8301
  @author Sylvain Devaux <sylvain.devaux@jalios.com>
--%><%@page import="com.jalios.util.Util"%>
<%@page import="com.jalios.jcms.JcmsUtil"%>
<%@page import="org.apache.log4j.Logger"%><%

//---------------------------------------------------------------
//
//  Step 5 : transverse groups
//
//---------------------------------------------------------------

%><%!

public static String getGlobalGroups (HttpServletRequest request, 
                                      Set<Group> groupSet, 
                                      String userLang, 
                                      List<String> selectedDatasIdList,
                                      final Group filterGroup,
                                      Logger logger) {
  if (Util.isEmpty(groupSet)) { return ""; }
  
  int counter = 0;
  StringBuilder sb = new StringBuilder("");
  sb.append("<div class='global-group-list datas-list'>");
  sb.append("<ul class='global-group-container list-unstyled group-list datas-container'>");
  
  // Is there any checked group for the current workspace ? If yes, do display the groups
  Set<Data> selectedDataSet = Util.interSet(groupSet, JcmsUtil.idCollectionToDataSet(selectedDatasIdList, Data.class));
      
  for (Group itGroup : groupSet) {
    counter++;
    
    if (itGroup == null || !itGroup.canBeReadBy(Channel.getChannel().getCurrentLoggedMember())) {
      continue;
    }
    
    boolean isGroupSelected = Util.notEmpty(selectedDataSet);
    
    //---------------------------------------------------------------
    //  Has a group been filtered ?
    //---------------------------------------------------------------
    if (filterGroup != null && ! selectedDatasIdList.contains(filterGroup.getId())) {
      selectedDatasIdList.add(filterGroup.getId());   // Mark the filtered group as "selected"
    }
    
    // Should display the groups if at least one is selected, or if the logged member filtered the member list on a Group
    boolean displayTheGroups = isGroupSelected || itGroup.equals(filterGroup);
    
    sb.append("<li class='group group-container'>");
    
    sb.append("<div class='wrapper ").append(displayTheGroups ? "group-show" : "").append("'>");
    
    //---------------------------------------------------------------
    //  Group input
    //---------------------------------------------------------------
    final  String inputName = Util.getString(request.getAttribute("step-input-name-attribute"), "missing-name");
    sb.append("<input type='checkbox' ");
    sb.append("name='"+inputName+"' ");
    sb.append("class='group-checker' ");
    sb.append("id='ID_").append(itGroup.getId()).append("' ");
    
    boolean isGuestMode = Util.toBoolean(request.getAttribute("guest-mode"), false);
    Group guestGroup = (Group) request.getAttribute("guest-group");
    boolean isGuestGroup = guestGroup != null && JcmsUtil.isSameId(guestGroup, itGroup);
    boolean isDisabled = isGuestGroup;
    if (isDisabled) {
      sb.append("disabled='disabled' ");
    }

    // Do check the checkbox ?
    if (selectedDatasIdList.contains(itGroup.getId()) || (isGuestMode && isGuestGroup)) {
      sb.append("checked='checked' ");
    }
    
    sb.append("value='").append(itGroup.getId()).append("' />");

    // Append hidden guestGroup id if relevant
    if (isGuestMode && isGuestGroup) {
      sb.append("<input type='hidden' ");
      sb.append("name='"+inputName+"' ");
      sb.append("value='"+guestGroup.getId()+"' ");
      sb.append("/>");
    }
    
    sb.append(JcmsUtil.getHtmlIcon(itGroup.getIcon(), "Grp", "", "group-icon"));
    sb.append("<label for='ID_").append(itGroup.getId()).append("' ");
    sb.append("class='group-name ")/*.append(isDefaultGroup ? "default-group" : "")*/.append("' ");
    sb.append(">");
    sb.append(itGroup.getName(userLang));
    sb.append("</label>");
    //sb.append("(").append(itGroup.getId()).append(")");
    sb.append("</div>");
    sb.append("</li>");
  }
  sb.append("</ul>");
  sb.append("</div>");
  return sb.toString();
}

%><%
if (hasGlobalGroupsStep && formHandler.isGlobalGroupsStep()) {
  Set<Group> globalGroupSet = formHandler.getGlobalGroupSet();

  String intro = JcmsUtil.glp(userLang, stepPrefixProp + "5.intro");
  if (Util.notEmpty(intro)) {
    %>
    <p class='info'>
      <jalios:message title="" level="<%= MessageLevel.INFO %>" dismissable="false" msg='<%= intro %>' />
    </p>      
    <%
  }
  request.setAttribute("guest-mode", formHandler.isGuestMode());
  request.setAttribute("guest-group", formHandler.getGuestGroup());
  request.setAttribute("step-input-name-attribute", MembersCsvImportHandler.GLOBAL_GROUP_ID_PARAM);
  List<String> selectedDatasIdList = Util.getArrayList(formHandler.getGlobalGrpIds());
  out.print(getGlobalGroups(request, globalGroupSet, userLang, selectedDatasIdList, null, logger));
}
%>
