<%--
  @Summary: Footer to be included by any jsp that might be invoked through ajax.
            Allows dynamically loading of javascript and css files (through jcmsContext.add(JavaScript|Css) ),
            as well as code inserted using <jalios:javascript> (or jcmsContext.addJavaScriptCode)
--%><%@page import="com.jalios.jcms.tools.PackerUtils"%><%

if (jcmsContext.isAjaxRequest()) {

%><%@ include file='/jcore/toastr/doToastr.jspf' %><%

  Set<Map.Entry<String,String>> afCssEntrySet = jcmsContext.getCSSHeaders().entrySet();
  Set<String> afJsSet = jcmsContext.getJavaScriptSet();
  Set<String> afJsCodeSet = jcmsContext.getJavaScriptCodeSet();
  if (Util.notEmpty(afCssEntrySet) || Util.notEmpty(afJsCodeSet) || Util.notEmpty(afJsSet)) {
  
  String cssAndJsFileVersion = Util.getString(PackerUtils.getPackVersion(), ""); 
  final String browserName = clientBrowser != null ? clientBrowser.getBrowserName() : null;
  final String browserForPacker = browserName != null && !browserName.isEmpty() ? browserName : "IE";
  final int maxUrlLengthPerPack = channel.getIntegerProperty("channel.packer.max-url-length.browser-" + browserForPacker,
        channel.getIntegerProperty("channel.packer.max-url-length", 1800));
  %>
<script>
/*  <![CDATA[ */ <%

  // ------------------------------------------
  //  CSS FILES
  // ------------------------------------------
  
  
  if (Util.notEmpty(afCssEntrySet)) { 
    if (logger.isDebugEnabled()) {
      logger.debug("AjaxFooter, CSS Files : ['" + Util.join(afCssEntrySet, "', '") + "']");
    }

    // Load all at once when CSS packer is enabled
    boolean noCssPack = hasParameter("no-css-pack");
    if (com.jalios.jcms.tools.PackerUtils.isCssPackerEnabled() && !noCssPack) {
      final List<String> cssPathList = new ArrayList<String>();
      final List<String> cssMediaList = new ArrayList<String>();
      for (Map.Entry<String,String> afCssEntry : afCssEntrySet) { 
        cssPathList.add(afCssEntry.getKey()); 
        cssMediaList.add(Util.getString(afCssEntry.getValue(), ""));
      } %>
      jQuery.jalios.DOM.loadStyleSheets(
          ['<%= Util.join(cssPathList, "',\n'") %>'],
          ['<%= Util.join(cssMediaList, "','") %>'], 
          '<%= cssAndJsFileVersion %>', <%= maxUrlLengthPerPack %>);<%
    }
    // Load each file individually if CSS packer is disabled
    else {
      for (Map.Entry<String,String> afCssEntry : afCssEntrySet) { 
        String afCssPath = afCssEntry.getKey(); 
        String afCssMedia = Util.getString(afCssEntry.getValue(), ""); %>
          jQuery.jalios.DOM.loadStyleSheet('<%= afCssPath %>', '<%= afCssMedia %>', '<%= cssAndJsFileVersion %>');<%
      }
    }
     
    jcmsContext.getCSSHeaders().clear();
  }
  
  // ------------------------------------------
  //  JS CODE
  // ------------------------------------------
  
  if (Util.notEmpty(afJsCodeSet)) { 
    logger.debug("AjaxFooter, JS Code"); %>

  var ajaxFooterJsCode = function() { try {<%
    for (String afJsCode : afJsCodeSet) { %>
      <%= afJsCode %><%
    }  %> } catch (ex){ jQuery.console.warn('ajaxFooterJsCode', ex, ex.message); }
  }
  <%-- Because <jalios:javascript> could relies on loaded js files --%>
  <% if (Util.notEmpty(afJsSet)) { %>jQuery.jalios.DOM._loadRegister(ajaxFooterJsCode);<% } else {%>ajaxFooterJsCode.defer();<% } 
   jcmsContext.getJavaScriptCodeSet().clear();
  }
  
  // ------------------------------------------
  //  JS FILES
  // ------------------------------------------
  
  if (Util.notEmpty(afJsSet)) { 
    if (logger.isDebugEnabled()) {
      logger.debug("AjaxFooter, JS Files : ['" + Util.join(afJsSet, "', '") + "']");
    }

    // Load all at once when JS packer is enabled 
    boolean noJsPack = hasParameter("no-js-pack");
    if (com.jalios.jcms.tools.PackerUtils.isJsPackerEnabled() && !noJsPack) { %>
      jQuery.jalios.DOM.loadJavaScripts(
          ['<%= Util.join(afJsSet, "',\n'") %>'], 
          '<%= cssAndJsFileVersion %>', <%= maxUrlLengthPerPack %>);<%
    }
    // Load each file individually if JS packer is disabled
    else {
      for (String afJsPath : afJsSet) { %>
        jQuery.jalios.DOM.loadJavaScript('<%= afJsPath %>', '<%= cssAndJsFileVersion %>');<%
      }
    }
    
    jcmsContext.getJavaScriptSet().clear();
  } %>
/* ]]> */
</script><% } %>
<% } %>