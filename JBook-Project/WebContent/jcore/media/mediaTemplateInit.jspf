<%--
  @Summary: Fragment used by media templates.
            Provides the mediaPath variables and such
--%><%
%><%@ page import="com.jalios.jcms.taglib.MediaTag" %><%
%><%@ page import="com.jalios.jcms.FileDocument" %><%

  String mediaPath  = (String) request.getAttribute(MediaTag.MEDIA_PATH);
  int maxWidth = Util.toInt(request.getAttribute(MediaTag.MEDIA_MAX_WIDTH), 320);
  int maxHeight = Util.toInt(request.getAttribute(MediaTag.MEDIA_MAX_HEIGHT), 240);
  String htmlAttributes = (String) request.getAttribute(MediaTag.HTML_ATTRIBUTES);
  String css = Util.getString(request.getAttribute(MediaTag.CSS), "");
  Data data = (Data) request.getAttribute(MediaTag.MEDIA_DATA);
  String mediaDescription = (String) request.getAttribute(MediaTag.MEDIA_DESCRIPTION);
  FileDocument fileDoc = (data instanceof FileDocument) ? (FileDocument) data : FileDocument.getFileDocumentFromFilename(mediaPath);
  mediaPath = (fileDoc != null) ? fileDoc.getFilename() : mediaPath;
  if (fileDoc != null && Util.isEmpty(fileDoc.getFilename()) && fileDoc.isRemote()) {
    mediaPath = fileDoc.getRemoteUri();
  }
  boolean isMediaURL = (fileDoc == null || fileDoc.isRemote()) && mediaPath != null && mediaPath.matches(channel.getProperty("media.template.URL-regex", "^(https?:)?//.*"));
  String url = isMediaURL ? mediaPath : null;
  if (Util.notEmpty(url) && (url.contains("\"") && url.contains("'"))) {
    logger.debug("Do not allow absolute URL containing quote : "+url);
    return;
  }
  if (data != null && !data.canBeReadBy(loggedMember)) {
    logger.debug("Media not displayed as user does not has proper read right for data :" + data);
    return;    
  }
%>